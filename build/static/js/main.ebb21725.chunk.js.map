{"version":3,"sources":["Header/Header.js","Article/Article.js","Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Component","Article","props","full_url","encodeURIComponent","website","link","result_img_url","API_URL","md5","your_api_secret","style","backgroundColor","color","target","rel","textcolor","category","name","description","src","alt","Main","randomize","array","i","length","j","Math","floor","random","temp","numberOfRows","ceil","AoA","beginIdx","endIdx","col","slice","push","splitData","this","splitColumns","myData","map","class","idx","src_Article_Article","key","App","Fragment","src_Header_Header","src_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebb21725.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.scss'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"branding\">\n          <a href=\"/\" className=\"home\">\n            <h1>That's a<br></br> \n            <div className=\"logo\">Cool</div> <br></br>Website\n            </h1>\n          </a>\n          <p>A Curated Collection of Agency & Portfolio Websites</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;","import './Article.scss';\nimport React from 'react';\nimport md5 from 'md5';\n\nvar API_URL = 'https://cdn.capture.techulus.in/';\nvar your_api_key = process.env.REACT_APP_API_KEY;\nvar your_api_secret = process.env.REACT_APP_API_SECRET;\n\nconst Article = props => {\n  var input_url = encodeURIComponent('http://' + props.website.link);\n  var options = 'delay=7&resizeWidth=400&resizeHeight=300';\n  var full_url = input_url + '&' + options;\n  var hash = md5(your_api_secret + 'url=' + full_url);\n\n  // Image URL\n  var result_img_url = API_URL + your_api_key + '/' + hash + '/image?url=' + full_url;\n\n  return (\n    <article className=\"website\" style={{ backgroundColor: props.website.color }}>\n      <a className=\"website-wrapper\" href={'http://' + props.website.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        <div className=\"eyebrow\">\n          <div className=\"category\" style={{color: props.website.textcolor}}>{props.website.category}</div>\n          <div className=\"link\" style={{color: props.website.textcolor}}>{props.website.link}</div>\n        </div>\n        <div className=\"title\" style={{color: props.website.textcolor}}>{props.website.name}</div>\n        <div className=\"info\">\n          <div className=\"desc\" style={{color: props.website.textcolor}}>{props.website.description}</div>\n          <img className=\"image\" src={result_img_url} alt={props.website.name} />\n        </div>\n      </a>\n    </article>\n  );\n};\n\nexport default Article;\n","import React, { Component } from \"react\";\nimport Article from \"../Article/Article\";\nimport myData from \"./../websites.json\";\nimport \"./Main.scss\";\n\nclass Main extends Component {\n\n  randomize = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  /** returns AoA */\n  splitColumns(array) {\n    const numberOfColumns = 3;\n    const numberOfRows = Math.ceil(array.length / numberOfColumns);\n    const AoA = [];\n\n    for (let i = 0; i < numberOfColumns; i++) {\n      const beginIdx = i * numberOfRows;\n      const endIdx = ((i + 1) * numberOfRows > array.length) ? null : (i + 1) * numberOfRows;\n\n      let col;\n      if (endIdx == null)\n        col = array.slice(beginIdx);\n      else\n        col = array.slice(beginIdx, endIdx);\n\n      AoA.push(col);\n    }\n\n    return AoA;\n  }\n\n  render() {\n    const splitData = this.splitColumns(this.randomize(myData));\n    return (\n      <main>\n        {\n          splitData.map(i => {\n            return (\n              <div class=\"col\">\n                {\n                  i.map((i, idx) => {\n                    return (\n                      <Article key={idx} website={i} />\n                    );\n                  })\n                }\n              </div>\n            )\n          })\n        }\n      </main>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport \"./Globals.scss\";\nimport Header from \"./Header/Header\";\nimport Main from \"./Main/Main\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Main />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}